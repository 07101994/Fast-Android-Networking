{
  "name": "Android Networking",
  "tagline": "Android Networking is a powerful library for doing any type of networking in Android Applications",
  "body": "# Android Networking \r\n\r\n[![Build Status](https://travis-ci.org/amitshekhariitbhu/AndroidNetworking.svg?branch=master)](https://travis-ci.org/amitshekhariitbhu/AndroidNetworking)\r\n\r\n<img src=https://raw.githubusercontent.com/amitshekhariitbhu/AndroidNetworking/master/assets/androidnetworking.png width=500 height=300 />\r\n\r\n### About Android Networking\r\n\r\nAndroid Networking is a powerful library for doing any type of networking in Android applications which is made on top of [OkHttp Networking Layer](http://square.github.io/okhttp/).\r\n\r\nAndroid Networking takes care of each and everything. So you don't have to do anything, just make request and listen for the response.\r\n\r\nAndroid Networking supports:\r\n\r\n* All type of HTTP/HTTPS request like GET,POST,etc\r\n* Downloading any type of file\r\n* Uploading any type of file (supports multipart upload)\r\n* Cancelling a request\r\n* Setting priority to any request (LOW, MEDIUM, HIGH, IMMEDIATE)\r\n\r\nAs it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it supports:\r\n\r\n* HTTP/2 support allows all requests to the same host to share a socket\r\n* Connection pooling reduces request latency (if HTTP/2 isnâ€™t available)\r\n* Transparent GZIP shrinks download sizes\r\n* Response caching avoids the network completely for repeat requests\r\n\r\n## Requirements\r\n\r\nAndroid Networking can be included in any Android application. \r\n\r\nAndroid Networking supports Android 2.3 (Gingerbread) and later. \r\n\r\n## Using Android Networking in your application\r\n\r\nAdd this in your build.gradle\r\n```\r\ncompile 'com.amitshekhar.android:android-networking:0.0.0'\r\n```\r\nDo not forget to add internet permission in manifest if already not present\r\n```\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\nThen initialize it in onCreate() Method of application class, :\r\n```\r\nAndroidNetworking.initialize(getApplicationContext());\r\n```\r\nInitializing it with some customization , as it uses [OkHttp](http://square.github.io/okhttp/) as newtorking layer, you can pass custom okHttpClient while initializing it.\r\n```\r\n# Adding an Network Interceptor for Debugging purpose :\r\nOkHttpClient okHttpClient = new OkHttpClient() .newBuilder()\r\n                        .addNetworkInterceptor(new StethoInterceptor())\r\n                        .build();\r\nAndroidNetworking.initialize(getApplicationContext(),okHttpClient);                        \r\n```\r\n```\r\n# Enabling GZIP for Request (Not needed if your server doesn't support GZIP Compression), anyway responses from server are automatically unGzipped if required. So enable it only\r\nif you need your request to be Gzipped before sending to server(Make sure your server support GZIP Compression).\r\nOkHttpClient okHttpClient = new OkHttpClient().newBuilder()\r\n                .addInterceptor(new GzipRequestInterceptor())\r\n                .build();\r\nAndroidNetworking.initialize(getApplicationContext(),okHttpClient);                \r\n```\r\nIf you are using proguard, then add this rule in proguard-project.txt\r\n```\r\n-dontwarn okio.**\r\n```\r\n### Making a GET Request\r\n```\r\nAndroidNetworking.get(\"http://api.localhost.com/{pageNumber}/test\")\r\n                 .addPathParameter(\"pageNumber\", \"0\")\r\n                 .addQueryParameter(\"limit\", \"3\")\r\n                 .addHeaders(\"token\", \"1234\")\r\n                 .setTag(\"test\")\r\n                 .setPriority(Priority.LOW)\r\n                 .build()\r\n                 .getAsJSONArray(new JSONArrayRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                    // do anything with response\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });\r\n```\r\n### Making a POST Request\r\n```\r\nAndroidNetworking.post(\"http://api.localhost.com/createAnUser\")\r\n                 .addBodyParameter(\"firstname\", \"Amit\")\r\n                 .addBodyParameter(\"lastname\", \"Shekhar\")\r\n                 .setTag(\"test\")\r\n                 .setPriority(Priority.MEDIUM)\r\n                 .build()\r\n                 .getAsJSONArray(new JSONArrayRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                    // do anything with response\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });\r\n```\r\nYou can also post json, file ,etc in POST request like this.\r\n```\r\nJSONObject jsonObject = new JSONObject();\r\ntry {\r\n    jsonObject.put(\"firstname\", \"Rohit\");\r\n    jsonObject.put(\"lastname\", \"Kumar\");\r\n    } catch (JSONException e) {\r\n    e.printStackTrace();\r\n    }\r\n        \r\nAndroidNetworking.post(\"http://api.localhost.com/createAnUser\")\r\n                 .addJSONObjectBody(jsonObject) // posting json\r\n                 .setTag(\"test\")\r\n                 .setPriority(Priority.MEDIUM)\r\n                 .build()\r\n                 .getAsJSONArray(new JSONArrayRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                    // do anything with response\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });\r\n                \r\nAndroidNetworking.post(\"http://api.localhost.com/postFile\")\r\n                 .addFileBody(file) // posting any type of file\r\n                 .setTag(\"test\")\r\n                 .setPriority(Priority.MEDIUM)\r\n                 .build()\r\n                 .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                    // do anything with response\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });               \r\n```\r\n### Downloading a file from server\r\n```\r\nAndroidNetworking.download(url,dirPath,fileName)\r\n                 .setTag(\"downloadTest\")\r\n                 .setPriority(Priority.MEDIUM)\r\n                 .build()\r\n                 .setDownloadProgressListener(new DownloadProgressListener() {\r\n                    @Override\r\n                    public void onProgress(long bytesDownloaded, long totalBytes) {\r\n                    // do anything with progress  \r\n                    }\r\n                 })\r\n                 .startDownload(new DownloadListener() {\r\n                    @Override\r\n                    public void onDownloadComplete() {\r\n                    // do anything after completion\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error    \r\n                    }\r\n                });                 \r\n```\r\n### Uploading a file to server\r\n```\r\nAndroidNetworking.upload(url)\r\n                 .addMultipartFile(\"image\",file)    \r\n                 .setTag(\"uploadTest\")\r\n                 .setPriority(Priority.IMMEDIATE)\r\n                 .build()\r\n                 .setUploadProgressListener(new UploadProgressListener() {\r\n                    @Override\r\n                    public void onProgress(long bytesUploaded, long totalBytes) {\r\n                    // do anything with progress \r\n                    }\r\n                 })\r\n                 .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                    // do anything with response                \r\n                    }\r\n                  \r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error \r\n                    }\r\n                 }); \r\n```\r\n### Getting Response and completion in an another thread executor \r\n(Note : Error and Progress will always be returned in main thread of application)\r\n```\r\nAndroidNetworking.upload(url)\r\n                 .addMultipartFile(\"image\",file)    \r\n                 .setTag(\"uploadTest\")\r\n                 .setPriority(Priority.IMMEDIATE)\r\n                 .build()\r\n                 .setExecutor(Executors.newSingleThreadExecutor()) // setting an executor to get response or completion on that executor thread\r\n                 .setUploadProgressListener(new UploadProgressListener() {\r\n                    @Override\r\n                    public void onProgress(long bytesUploaded, long totalBytes) {\r\n                    // do anything with progress \r\n                    }\r\n                 })\r\n                 .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                    // below code will be executed in the executor provided\r\n                    // do anything with response                \r\n                    }\r\n                  \r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error \r\n                    }\r\n                 }); \r\n```\r\n### Cancelling a request.\r\nAny request with a given tag can be cancelled. Just do like this.\r\n```\r\nAndroidNetworking.cancel(\"testTag\"); // All the requests with the given tag will be cancelled.\r\n```\r\n### Loading image from network into ImageView\r\n```\r\n      <com.androidnetworking.widget.ANImageView\r\n          android:id=\"@+id/imageView\"\r\n          android:layout_width=\"100dp\"\r\n          android:layout_height=\"100dp\"\r\n          android:layout_gravity=\"center\" />\r\n          \r\n      imageView.setDefaultImageResId(R.drawable.default);\r\n      imageView.setErrorImageResId(R.drawable.error);\r\n      imageView.setImageUrl(imageUrl);          \r\n```\r\n### Getting Bitmap from url with some specified parameters\r\n```\r\nAndroidNetworking.get(imageUrl)\r\n                 .setTag(\"imageRequestTag\")\r\n                 .setPriority(Priority.MEDIUM)\r\n                 .setBitmapMaxHeight(100)\r\n                 .setBitmapMaxWidth(100)\r\n                 .setBitmapConfig(Bitmap.Config.ARGB_8888)\r\n                 .build()\r\n                 .getAsBitmap(new BitmapRequestListener() {\r\n                    @Override\r\n                    public void onResponse(Bitmap bitmap) {\r\n                    // do anything with bitmap\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });\r\n```\r\n### Error Code Handling\r\n```\r\npublic void onError(ANError error) {\r\n                           if (error.getErrorCode() != 0) {\r\n                           // received error from server\r\n                           // error.getErrorCode() - the error code from server\r\n                           // error.getErrorBody() - the error body from server\r\n                           // error.getErrorDetail() - just an error detail\r\n                                Log.d(TAG, \"onError errorCode : \" + error.getErrorCode());\r\n                                Log.d(TAG, \"onError errorBody : \" + error.getErrorBody());\r\n                                Log.d(TAG, \"onError errorDetail : \" + error.getErrorDetail());\r\n                           } else {\r\n                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError\r\n                                Log.d(TAG, \"onError errorDetail : \" + error.getErrorDetail());\r\n                           }\r\n                        }\r\n```\r\n### Remove Bitmap from cache or clear cache\r\n```\r\nAndroidNetworking.evictBitmap(key); // remove a bitmap with key from LruCache\r\nAndroidNetworking.evictAllBitmap(); // clear LruCache\r\n```\r\n### Prefetch a request (so that it can return from cache when required at instant)\r\n```\r\nAndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)\r\n                .addPathParameter(\"pageNumber\", \"0\")\r\n                .addQueryParameter(\"limit\", \"30\")\r\n                .setTag(this)\r\n                .setPriority(Priority.LOW)\r\n                .build()\r\n                .prefetch();\r\n```\r\n### Customizing OkHttpClient for a particular request\r\n```\r\nOkHttpClient okHttpClient = new OkHttpClient().newBuilder()\r\n                .addInterceptor(new GzipRequestInterceptor())\r\n                .build();\r\n                \r\nAndroidNetworking.get(\"http://api.localhost.com/{pageNumber}/test\")\r\n                 .addPathParameter(\"pageNumber\", \"0\")\r\n                 .addQueryParameter(\"limit\", \"3\")\r\n                 .addHeaders(\"token\", \"1234\")\r\n                 .setTag(\"test\")\r\n                 .setPriority(Priority.LOW)\r\n                 .setOkHttpClient(okHttpClient) // passing a custom okHttpClient \r\n                 .build()\r\n                 .getAsJSONArray(new JSONArrayRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                    // do anything with response\r\n                    }\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                    // handle error\r\n                    }\r\n                });\r\n```\r\n### Making a conditional request (Building a request)\r\n```\r\nANRequest.GetRequestBuilder getRequestBuilder = new ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);\r\n               \r\nif(isHeaderRequired){\r\n getRequestBuilder.addHeaders(\"token\", \"1234\");\r\n}\r\n\r\nif(executorRequired){\r\n getRequestBuilder.setExecutor(Executors.newSingleThreadExecutor());\r\n}\r\n               \r\nANRequest anRequest = getRequestBuilder.build();       \r\n                 \r\nanRequest.getAsJSONObject(new JSONObjectRequestListener() {\r\n    @Override\r\n    public void onResponse(JSONObject response) {\r\n        // do anything with response\r\n    }\r\n    @Override\r\n    public void onError(ANError error) {\r\n        // handle error\r\n    }\r\n});\r\n```\r\n### Inspiration behind making of this library :\r\n* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking library obsolete.\r\n* No other single library do each and everything like making request, downloading any type of file, uploading file, loading\r\n  image from network in ImageView, etc. There are libraries but they are outdated.\r\n* No other library provided simple interface for doing all types of things in networking like setting priority, cancelling, etc.\r\n* As it uses [Okio](https://github.com/square/okio) , No more GC overhead in android application.\r\n  [Okio](https://github.com/square/okio) is made to handle GC overhead while allocating memory.\r\n  [Okio](https://github.com/square/okio) do some clever things to save CPU and memory.\r\n* As it uses [OkHttp](http://square.github.io/okhttp/) , most important it supports HTTP/2.  \r\n\r\n### TODO\r\n* Network Speed Change Listener\r\n* Total data consumption in any request\r\n* Network Execution Logic on the basis of network speed change\r\n* Integration with other library\r\n* And of course many many features and bug fixes\r\n\r\n### License\r\n```\r\n   Copyright (C) 2016 Amit Shekhar\r\n   Copyright (C) 2011 The Android Open Source Project\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n```\r\n\r\n### Contributing to Android Networking\r\nJust make pull request. You are in!\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}